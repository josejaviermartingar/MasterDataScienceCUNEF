library(tidyverse)
library(ggplot2)
mpg
data.frame(mpg)
autos<-data.frame(mpg)
View(autos)
help(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
+
geom_point(mapping = aes(x = displ, y = hwy))
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
View(autos)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2, color = blue)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = blue)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue")) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = blue)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy),color = blue) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = blues9)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "darkblue") +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drw, y = cyl)) +
facet_grid(drv~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(drv~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(.~cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(cyl~.)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl)) +
facet_grid(.~cyl)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = dipl, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), formula = y ~ x, method = "loess")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), linetype=drv formula = y ~ x, method = "loess")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), linetype=drv, formula = y ~ x, method = "loess")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), linetype = drv, formula = y ~ x, method = "loess")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv), formula = y ~ x, method = "loess")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), formula = y ~ x, method = "lm")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), formula = y ~ x, method = "glm")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), formula = y ~ x, method = "auto")
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy), formula = y ~ x, method = "gam")
library(dplyr)
nycflights13
library(nycflights13)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
nycflights13::flights
vuelos<-nycflights13::flights
filter(vuelos, vuelos$month == 1, vuelos$day == 1)
filter(vuelos, month ==1, day==1)
x<-filter(vuelos, month ==1, day==1)
filter(vuelos, month == 12, day == 25)
y<-filter(vuelos, month == 12, day == 25)
nov_dec<-filter(vuelos, month %in% c(11, 12))
View(nov_dec)
filter(vuelos, arr_delay <= 120, dep_delay <= 120)
#operadores logicos
filter(vuelos, month == 11 | month == 12)
#filtra los vuelos con retraso menors a 120 minutos de retraso
filter(vuelos, arr_delay <= 120, dep_delay <= 120)
filter(vuelos, !(arr_delay > 120 | dep_delay > 120))
?tibble
#funcion arrange sirve para organizar
arrange(vuelos, year, month, day)
View(vuelos)
View(nov_dec)
arrange(vuelos, desc(array_delay))
arrange(vuelos, desc(arr_delay))
#select para seleccionar columnas
select(vuelos, year:day)
#######Ejercicios pagina 14#######
filter(vuelos, arr_delay >= 120)
#######Ejercicios pagina 14#######
dosomashoras<-filter(vuelos, arr_delay >= 120)
View(dosomashoras)
View(vuelos)
desdeHou<-filter(vuelos, origin == IAH)
desdeHou<-filter(vuelos, origin == "IAH")
View(desdeHou)
View(desdeHou)
rm(desdeHou)
str(vuelos$origin)
f<-str(vuelos$origin)
rm(f)
desdeHou<-filter(vuelos, origin == "HOU")
View(desdeHou)
rm(desdeHou)
desdeHou<-filter(vuelos, dest == "HOU")
aHou<-filter(vuelos, dest == "HOU")
rm(desdeHou)
View(aHou)
?nycflights13
str(vuelos$carrier)
operators<-filter(vuelos, carrier == "UA", "AA", "DL")
operators<-filter(vuelos, carrier == "UA"&"AA"&"DL")
operators<-filter(vuelos, carrier == "UA" | carrier =="AA" | carrier == "DL")
View(operators)
verano<-filter(vuelos, month == 7 | month == 8 | month == 9)
llegatarde<-filter(vuelos, arr_delay>120, dep_delay == 0)
View(llegatarde)
retraso1h<-filter(vuelos, dep_delay >= 60, air_time = 30)
retraso1h<-filter(vuelos, dep_delay >= 60, air_time == 30)
View(retraso1h)
medianoche<-filter(vuelos, time_hour>= 2013-01-01 00:00:00 & time_hour<= 2013-12-31 06:00:00)
medianoche<-filter(vuelos, time_hour>= "2013-01-01 00:00:00" & time_hour<= "2013-12-31 06:00:00")
View(medianoche)
medianoche<-filter(vuelos, time_hour>= "2013-01-01 00:00:00" & time_hour< "2013-12-31 06:00:00")
medianoche<-filter(vuelos, time_hour> "2013-01-01 00:00:00" & time_hour< "2013-12-31 06:00:00")
lost<-filter(vuelos, dep_time == "NA")
View(lost)
lost<-filter(vuelos, dep_time ="NA")
lost<-filter(vuelos, dep_time ="NA")
View(lost)
lost<-filter(vuelos, dep_time = "NA")
lost<-filter(vuelos, dep_time = "missing")
lost<-filter(vuelos, dep_time = 0)
###ejercicos de arrange pagina 17####
orden1<-arrange(vuelos, desc(dep_delay))
View(orden1)
medianoche<-filter(vuelos, hour> 0 & hour<= 6)
medianoche<-filter(vuelos, hour>= 0 & hour<= 6)
volaron_mas<-head(vuelos$distance)
head(vuelos$distance)
volaron_mas<-arrange(vuelos, distance >= 2500)
volaron_mas<-arrange(vuelos, distance > 2500)
volaron_mas<-arrange(vuelos, distance <= 5000, distance >= 2500)
rm(volaron_mas)
arrange(vuelos, distance <= 5000, distance >= 2500)
filter(vuelos, distance <= 5000, distance >= 2500)
volaron_mas<-filter(vuelos, distance <= 5000, distance >= 2500)
volaron_menos<-filter(vuelos, distance <= 2500)
aHou<-filter(vuelos, dest == "HOU"|dest == "IAH")
sum(is.na(dep_time))
sum(is.na(vuelos$dep_time))
lost<-sum(is.na(vuelos$dep_time))
NA^0
na|TRUE
NA|TRUE
NA&FALSE
NA*0
###ejemplo####
mutate(vuelos, gain = arr_delay - dep_delay, speed = distance/air_time * 60)
View(vuelos)
###ejemplo####
vuelos<-mutate(vuelos, gain = arr_delay - dep_delay, speed = distance/air_time * 60)
View(vuelos)
###ejemplo####
vuelos<-mutate(vuelos, gain = arr_delay - dep_delay, speed = (distance/air_time) * 60)
View(vuelos)
(vuelos$air_time == vuelos$arr_time - vuelos$dep_time)
(vuelos$air_time - (vuelos$arr_time - vuelos$dep_time))
10%%2
1650%%100
10%%3
10%%4
count(vuelos)
retrasos <- vuelos %>%
group_by(dest) %>%
summarize(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)%>%
filter(count > 20, dest != "HNL"))
retrasos <- vuelos %>%
group_by(dest) %>%
summarize(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(count > 20, dest != "HNL")
View(retrasos)
funcionfibo<-function(n){
if(n<=1){
return(n)
}else{
return(funcionfibo(n-1)+funcionfibo(n-2))
}
}
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
data_list=list()
for(i in 1:n){
a<-fibo[i]*fibo[i+3]
b<-2*fibo[i+1]*fibo[i+2]
h<-fibo[i+1]*fibo[i+1]+fibo[i+2]*fibo[i+2]
data<-data.frame(a=a, b=b, h=h)
data_list[[i]]<-data
}
cat("\n")
cat("\n")
cat("\n")
return(data_list)
#aplicamos cualquier valor y nos da el numero de ternas que deseemos cumpliendo el
#teorema de Pitagoras
ternasn(3)
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
#genero la serie de Fibonacci para que la funcion coja los valores de la serie
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
#genero la serie de Fibonacci para que la funcion coja los valores de la serie
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
#genero una lista para que me vaya anotando las ternas
data_list=list()
for(i in 1:n){
a<-fibo[i]*fibo[i+3]
b<-2*fibo[i+1]*fibo[i+2]
h<-fibo[i+1]*fibo[i+1]+fibo[i+2]*fibo[i+2]
data<-data.frame(a=a, b=b, h=h)
data_list[[i]]<-data
}
cat("\n")
cat("\n")
cat("\n")
return(data_list)
}
ternasn(5)
ternasn(10)
ternasn(5)
ternasn(10)
ternasn(7)
ternasn(10)
library(readr)
library(readr::read_csv(ontario))
library(readr)
library(readr)
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
activities <- library(readr::read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
activities <- library(readr::read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv"))
library(readr::read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv"))
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv"))
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
sleep
View(activities)
sleep <- sleep
rm(sleep)
sleep_data <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/sleep.csv")
activities(count(NA))
View(activities)
activities(activities$GPS, count(NA))
(activities$GPS, count(NA))
count(NA)
sum(is.na(activities$GPS))
view(activities, "activities")
sum(is.na(activities$GPS))
sum(is.na(activities$GPS))
view(activities, "activities")
sum(is.na(activities$GPS))
summarise(is.na(activities$GPS))
sum(is.na(activities$GPS))
sum(is.na(activities$GPS))
library(tidyverse)
library(readr)
sum(is.na(activities$GPS))
sum(is.na(activities$GPS))
library(dbplyr)
sum(is.na(activities$GPS))
library(tidyverse)
library(dplyr)
sum(is.na(activities$GPS))
activities1 <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
sum(is.na(activities1$GPS))
library(readr)
library(dplyr)
library(tidyverse)
sum(is.na(activities$GPS))
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
sum(is.na(activities$GPS))
sleep_data <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/sleep.csv")
library(readr)
activities <- read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
View(activities)
sum(is.na(activities$GPS))
ModeloA<-c(23.6,33.7,10.1,12.9,67.8,9.3,47.4,54.9)
ModeloB<-c(24,41.6,8.7, 13.5, 66.4,15.2, 50.5, 52.3)
plot(ModeloA, ModeloB)
##Conteo de NAs
sum(is.na(activities$GPS))
activities1 <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
##Conteo de NAs
sum(is.na(activities1$GPS))
View(activities)
View(activities1)
activities1$GPS
as.character(activities)
as.character(activities$GPS)
##Conteo de NAs
sum(is.na(activities$GPS))
rm(activities, activities1)
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
##Conteo de NAs
sum(is.na(activities$GPS))
as.character(activities$GPS)
##Conteo de NAs
sum(is.na(activities$GPS))
as.character(activities$GPS)
##Conteo de NAs
sum(is.na(activities$GPS))
View(activities)
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
as.character(activities$GPS)
as.character(activities$GPS)
##conteo de NAs
sum(is.na(activities$GPS))
library(readr)
activities <- read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
View(activities)
##conteo de NAs
sum(is.na(activities$GPS))
activities <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
as.character(activities$GPS)
##conteo de NAs
sum(is.na(activities$GPS))
m<-as.character(activities$GPS)
##conteo de NAs
sum(is.na(m))
##conteo de NAs
sum(is.na(activities$GPS))
activities$GPS<-as.character(activities$GPS)
##conteo de NAs
sum(is.na(activities$GPS))
##conteo de NAs
sum(is.na(activities$GPS))
activities$GPS
library(readr)
activities <- read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
View(activities)
sum(is.na(activities$GPS))
##conteo de NAs
NA<-sum(is.na(activities$GPS))
##conteo de NAs
NAs<-sum(is.na(activities$GPS))
ModeloA<-c(23.6,33.7,10.1,12.9,67.8,9.3,47.4,54.9)
ModeloB<-c(24,41.6,8.7, 13.5, 66.4,15.2, 50.5, 52.3)
plot(ModeloA, ModeloB)
fact_recur <- function(n){
if (n==0) return (1)
else return (n*fact_recur(n-1))
}
# checking for some examples
print(fact_recur(5))
fact <- function(n){
if (n==0) return (1)
else return (n*fact_recur(n-1))
}
# checking for some examples
print(fact_recur(5))
# checking for some examples
fact(5)
fact <- function(n){
if (n==0) return (1)
else return (n*fact(n-1))
}
fact <- function(n){
if (n==0) return (1)
else return (n*fact(n-1))
}
# checking for some examples
fact(5)
fact <- function(n){
if (n<=1) return (1)
else return (n*fact(n-1))
}
# checking for some examples
fact(5)
fib<-function (n){
if ((n==0)|(n==1)) return(n)
else return(fib(n-1)+fib(n-2))
}
print(fib(5))
# bur 36 take its time:
print(fib(36))
# esc Escape from the long executions
# computing times
t1<-Sys.time()
print(fib(25))
t2<-Sys.time()
print(t2-t1)
t1<-Sys.time()
print(fib(25))
t2<-Sys.time()
print(t2-t1)
t1<-Sys.time()
print(fib(35))
t2<-Sys.time()
print(t2-t1)
fib_iter<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
# quickly
fib_iter(80)
t1<-Sys.time()
fib_iter(80)
t2<-Sys.time()
print(t2-t1)
fib_final<- function(n, f1=0, f2=1){
if (n==0) return(f1)
else if (n==1) return(f2)
else return(fib_final(n-1,f2, f1+f2))
}
# examples
fib_final(5,0,1)
#
fib_final(187,0,1) # por ejemplo.
t1<-Sys.time()
fib(32)
t2<-Sys.time()
fib_iter(32)
t3<-Sys.time()
fib_final(32,0,1)
t4<-Sys.time()
t2-t1
t3-t2
t4-t3
fib_final<- function(n, f1=0, f2=1){
if (n==0) return(f1)
else if (n==1) return(f2)
return(fib_final(n-1,f2, f1+f2))
}
# examples
fib_final(5,0,1)
activities <- read_csv("C:/Users/Equipo/Desktop/CUNEF/Programacion con R/Practicas/activities.csv")
activities$GPS<-as.character(activities$GPS)
##conteo de NAs
NAs<-sum(is.na(activities$GPS))
View(activities)
