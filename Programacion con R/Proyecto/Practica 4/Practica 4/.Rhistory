sleep_new1<-rename(sleep_new1, ligero = `ligero (s)`, profundo = `profundo (s)`, despierto = `despierto (s)`, duracion_dormir = `Duration to sleep (s)`, duracion_desp = `Duration to wake up (s)`, snoring = `Snoring (s)`)
sleep_new1 <- mutate(sleep_new1,  tiempo_total  = ligero  + profundo)
sleep_new <- mutate(sleep_new,  tiempo_total  = ligero  + profundo)
sleep_new1 <- substr(sleep_new$de, 1, 10)
act_new1<- substr(act_new$de, 1, 10)
act_new2$date<- substr(act_new$de, 1, 10)
act_new2 <- act_new
act_new2$date<- substr(act_new$de, 1, 10)
View(act_new2)
sleep_new$date <- substr(sleep_new$de, 1, 10)
act_new$date<- substr(act_new$de, 1, 10)
b<-merge(act_new, sleep_new, by=date)
b<-merge(act_new, sleep_new, by="date")
View(b)
sleep_new<-merge(act_new, sleep_new, by="date")
View(sleep_new)
sleep_new <-select(sleep_new, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, duracion_dormir, duracion_desp, snoring
View(sleep_new)
View(sleep_new)
sleep_new <-select(sleep_new, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, duracion_dormir, duracion_desp, snoring
sleep_new <-select(sleep_new, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, duracion_dormir, duracion_desp, snoring)
sleep_new <-select(sleep_new,  date, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, duracion_dormir, duracion_desp, snoring)
View(sleep_new)
View(b)
sleep_new <-select(sleep_new,  date, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, despertar, duracion_dormir, duracion_desp, snoring, tiempo_total)
sleep_new <-select(sleep_new,  date, de.x, a.x, ciudad, tipo, ligero, profundo, despierto, duracion_dormir, duracion_desp, snoring, tiempo_total)
sleep_new <-na.omit(sleep_new)
sleep_new <- mutate(sleep_new,  tiempo_total  = ligero  + profundo)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(ligerp~.)
#19. Representar la relación totalsleep y profundo usando como facetas el factor ciudad
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(ligero~.)
#19. Representar la relación totalsleep y profundo usando como facetas el factor ciudad
sleep_new7 <- mutate(sleep_new,  tiempo_total  = tiempo_total/120, ligero = ligero/120, profundo = profundo/120)
View(sleep_new7)
#19. Representar la relación totalsleep y profundo usando como facetas el factor ciudad
sleep_new <- mutate(sleep_new,  tiempo_total  = tiempo_total/120, ligero = ligero/120, profundo = profundo/120)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(ligero~.)
sleep_new <- mutate(sleep_new,  tiempo_total  = tiempo_total/120, ligero = ligero/120, profundo = profundo/120)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(~ligero)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo))
sleep_new <- mutate(sleep_new,  tiempo_total  = tiempo_total/120, ligero = ligero/120, profundo = profundo/120)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(ligero)
ggplot(data = sleep_new) +
geom_point(mapping = aes(x = tiempo_total , y = profundo)) +
facet_grid(~ciudad)
write_csv(sleep_new, "sleep_new.csv")
library(readr)
LA_CESTA <- read_csv("C:/Users/Equipo/Desktop/CUNEF/Fundamentos para el Analisis de Datos/Practicas/Estadistica Pract/LA CESTA.csv")
View(LA_CESTA)
cesta<-LA_CESTA
#Calculamos la media de la variable para poder hallar el parametro Lambda y despues
#calcular las correspondientes distribuciones.
mean(cesta$x)
lambda<-mean(cesta$x)
#Calculamos las diferentes distribuciones de Poisson para calcular las diferentes
#probabilidades.
dpois(0, lambda)
sum(dpois(2:5, lambda))
ppois(10, lower.tail = FALSE, lambda2)
lambda2<-lambda*5
ppois(10, lower.tail = FALSE, lambda2)
1-ppois(10, 5*lambda) #IGUAL A LA DE ABAJO
fit <- fitdistr(cesta$x, densfun="normal")
fit
fit <- fitdistr(cesta$x, densfun="normal")
fit <- fitdistr(cesta$x, densfun="normal")
fit
(cesta$x, densfun="normal")
fitdistr(cesta$x, densfun="normal")
install.packages("MASS")
library(MASS)
fit <- fitdistr(cesta$x, densfun="normal")
fit
View(fit)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
hist(cesta$x, pch=20, breaks=25, prob=TRUE, main="HISTOGRAMA")
fitMME <- fitdistr(cesta$x, "normal", method="mme")
fitMME
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fitMME$estimate[1], fitMME$estimate[2]), col="blue", lwd=2, add=T)
fitMGE <-fitdistr(cesta$x, "normal", method="mge")
fitMGE
t.test(cesta$x, conf.level = .95)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
x
names(cesta)
View(cesta)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=7, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
hist(cesta$x, pch=20, breaks=25, prob=TRUE, main="HISTOGRAMA")
curve(dnorm(x, fit$estimate[1], fit$estimate[2]), col="red", lwd=2, add=T)
t.test(cesta$x, conf.level = .95)
curve(dnorm(x, fitMME$estimate[1], fitMME$estimate[2]), col="blue", lwd=2, add=T)
library(ggpubr)
library(PairedData)
library("dplyr")
library("ggpubr")
library("PairedData")
#Para hallar la diferencia de medias del ultimo apartado necesitaremos los siguientes
#paquetes
library("dplyr")
library("ggpubr")
library("PairedData")
#El intervalo de confianza al 95% de confianza nos da unos valores entre 0.709 y 0.851
#por lo que podremos decir que el valor medio de clientes que acceden por cola unica esta
#dentro del intervalo.
t.test(cesta$x, conf.level = .95)
rnorm(500, mean = 0.78, sd = 0.96)
set.seed(123)
rnorm(500, mean = 0.78, sd = 0.96)
set.seed(123)
comp<-rnorm(500, mean = 0.78, sd = 0.96)
rm(LA_CESTA)
as.data.frame(comp)
d<-as.data.frame(comp)
comp<-as.data.frame(comp)
rm(d)
View(comp)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(123)
#para crear los 500 registros de la competencia
set.seed(123)
comp<-rnorm(600, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
set.seed
set.seed(123)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test.paired(comp, cesta$x)
dif_mean
dif_mean <- t.test.paired(comp, cesta$x)
dif_mean <- t.test(comp, cesta$x)
dif_mean
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(123)
#para crear los 500 registros de la competencia
set.seed(77)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test(comp, cesta$x)
dif_mean
rm(fit, fitMME, fitMGE)
knitr::opts_chunk$set(echo = TRUE)
#Carga del dataset.
cesta<- read.csv("C:/Users/Equipo/Desktop/CUNEF/Fundamentos para el Analisis de Datos/Practicas/Estadistica Pract/LA CESTA.csv")
#Calculamos la media de la variable para poder hallar el parametro Lambda y despues
#calcular las correspondientes distribuciones.
mean(cesta$x)
lambda<-mean(cesta$x)
#Calculamos las diferentes distribuciones de Poisson para calcular las diferentes
#probabilidades. En el ultimo hemos tenido que cambiar lambda que estaba por minuto
#a una nueva lambda que es por cinco minutos.
dpois(0, lambda)
sum(dpois(2:5, lambda))
1-ppois(10, 5*lambda)
lambda2<-lambda*5
#El intervalo de confianza al 95% de confianza nos da unos valores entre [0.7089066 - 0.8510934]
#por lo que podremos decir que el valor medio de clientes que acceden por cola unica esta
#dentro del intervalo.
t.test(cesta$x, conf.level = .95)
#Los datos que tenemos de la competencia son n=500 media=0.69 y sd=0.96 y nuestros datos
#son n=600 media=0.78 y sd=0.96.
#Para hallar la diferencia de medias del ultimo apartado necesitaremos los siguientes
#paquetes
library("dplyr")
library("ggpubr")
library("PairedData")
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(77)
#para crear los 500 registros de la competencia
set.seed(77)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test(comp, cesta$x)
dif_mean
#A la vista de los resultados obtenidos no podemos asegurar que la diferencia de medias
#sea distinta de cero, incluso podemos afirmar lo mismo guiandonos por el p-valor, ya
#que este nos da un valor muy superior al nivel de significacion (0.05).
knitr::opts_chunk$set(echo = TRUE)
#Carga del dataset.
cesta<- read.csv("C:/Users/Equipo/Desktop/CUNEF/Fundamentos para el Analisis de Datos/Practicas/Estadistica Pract/LA CESTA.csv")
#Calculamos la media de la variable para poder hallar el parametro Lambda y despues
#calcular las correspondientes distribuciones.
mean(cesta$x)
lambda<-mean(cesta$x)
#Calculamos las diferentes distribuciones de Poisson para calcular las diferentes
#probabilidades. En el ultimo hemos tenido que cambiar lambda que estaba por minuto
#a una nueva lambda que es por cinco minutos.
dpois(0, lambda)
sum(dpois(2:5, lambda))
1-ppois(10, 5*lambda)
lambda2<-lambda*5
#El intervalo de confianza al 95% de confianza nos da unos valores entre [0.7089066 - 0.8510934]
#por lo que podremos decir que el valor medio de clientes que acceden por cola unica esta
#dentro del intervalo.
t.test(cesta$x, conf.level = .95)
#Los datos que tenemos de la competencia son n=500 media=0.69 y sd=0.96 y nuestros datos
#son n=600 media=0.78 y sd=0.96.
#Para hallar la diferencia de medias del ultimo apartado necesitaremos los siguientes
#paquetes
library("dplyr")
library("ggpubr")
library("PairedData")
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(77)
#para crear los 500 registros de la competencia
set.seed(77)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test(comp, cesta$x)
dif_mean
#A la vista de los resultados obtenidos no podemos asegurar que la diferencia de medias
#sea distinta de cero, incluso podemos afirmar lo mismo guiandonos por el p-valor, ya
#que este nos da un valor muy superior al nivel de significacion (0.05).
#Carga del dataset.
cesta<- read.csv("C:/Users/Equipo/Desktop/CUNEF/Fundamentos para el Analisis de Datos/Practicas/Estadistica Pract/LA CESTA.csv")
#Calculamos la media de la variable para poder hallar el parametro Lambda y despues
#calcular las correspondientes distribuciones.
mean(cesta$x)
lambda<-mean(cesta$x)
#Calculamos las diferentes distribuciones de Poisson para calcular las diferentes
#probabilidades. En el ultimo hemos tenido que cambiar lambda que estaba por minuto
#a una nueva lambda que es por cinco minutos.
dpois(0, lambda)
sum(dpois(2:5, lambda))
1-ppois(10, 5*lambda)
lambda2<-lambda*5
#El intervalo de confianza al 95% de confianza nos da unos valores entre [0.7089066 - 0.8510934]
#por lo que podremos decir que el valor medio de clientes que acceden por cola unica esta
#dentro del intervalo.
t.test(cesta$x, conf.level = .95)
#Los datos que tenemos de la competencia son n=500 media=0.69 y sd=0.96 y nuestros datos
#son n=600 media=0.78 y sd=0.96.
#Para hallar la diferencia de medias del ultimo apartado necesitaremos los siguientes
#paquetes
library("dplyr")
library("ggpubr")
library("PairedData")
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(77)
#para crear los 500 registros de la competencia
set.seed(77)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test(comp, cesta$x)
dif_mean
#A la vista de los resultados obtenidos no podemos asegurar que la diferencia de medias
#sea distinta de cero, incluso podemos afirmar lo mismo guiandonos por el p-valor, ya
#que este nos da un valor muy superior al nivel de significacion (0.05).
#Carga del dataset.
cesta<- read.csv("C:/Users/Equipo/Desktop/CUNEF/Fundamentos para el Analisis de Datos/Practicas/Estadistica Pract/LA CESTA.csv")
#Calculamos la media de la variable para poder hallar el parametro Lambda y despues
#calcular las correspondientes distribuciones.
mean(cesta$x)
lambda<-mean(cesta$x)
#Calculamos las diferentes distribuciones de Poisson para calcular las diferentes
#probabilidades. En el ultimo hemos tenido que cambiar lambda que estaba por minuto
#a una nueva lambda que es por cinco minutos.
dpois(0, lambda)
sum(dpois(2:5, lambda))
1-ppois(10, 5*lambda)
lambda2<-lambda*5
#El intervalo de confianza al 95% de confianza nos da unos valores entre [0.7089066 - 0.8510934]
#por lo que podremos decir que el valor medio de clientes que acceden por cola unica esta
#dentro del intervalo.
t.test(cesta$x, conf.level = .95)
#Los datos que tenemos de la competencia son n=500 media=0.69 y sd=0.96 y nuestros datos
#son n=600 media=0.78 y sd=0.96.
#Para hallar la diferencia de medias del ultimo apartado necesitaremos los siguientes
#paquetes
library("dplyr")
library("ggpubr")
library("PairedData")
#He generado 500 numeros aleatorios mediante la distribucion normal con una semilla(77)
#para crear los 500 registros de la competencia
set.seed(77)
comp<-rnorm(500, mean = 0.69, sd = 0.96)
comp<-as.data.frame(comp)
dif_mean <- t.test(comp, cesta$x)
dif_mean
#A la vista de los resultados obtenidos no podemos asegurar que la diferencia de medias
#sea distinta de cero, incluso podemos afirmar lo mismo guiandonos por el p-valor, ya
#que este nos da un valor muy superior al nivel de significacion (0.05).
install.packages("DescTools")
funcionfibo<-function(n){
if(n<=1){
return(n)
}else{
return(funcionfibo(n-1)+funcionfibo(n-2))
}
}
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
fib_iter<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
funcionfibo<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
rm(fib_iter())
rm(fib_iter)
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
#genero la serie de Fibonacci para que la funcion coja los valores de la serie
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
}
ternasn<-function(n){
fibo<-c()
j<-n*4
for(i in 1:j){
fibo<-append(fibo, funcionfibo (i))
}
}
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
data_list=list()
for(i in 1:n){
a<-fibo[i]*fibo[i+3]
b<-2*fibo[i+1]*fibo[i+2]
h<-fibo[i+1]*fibo[i+1]+fibo[i+2]*fibo[i+2]
data<-data.frame(a=a, b=b, h=h)
data_list[[i]]<-data
}
cat("\n")
cat("\n")
cat("\n")
return(data_list)
data_list=list()
for(i in 1:n){
a<-fibo[i]*fibo[i+3]
b<-2*fibo[i+1]*fibo[i+2]
h<-fibo[i+1]*fibo[i+1]+fibo[i+2]*fibo[i+2]
data<-data.frame(a=a, b=b, h=h)
data_list[[i]]<-data
}
cat("\n")
cat("\n")
cat("\n")
data_list
fibo
fibo<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
data_list=list()
for(i in 1:n){
a<-fibo(i)*fibo(i+3)
b<-2*fibo(i+1)*fibo(i+2)
h<-fibo(i+1)^2+fibo(i+2)^2
print(a,b,h)
}
for(i in 1:n){
a<-fibo(i)*fibo(i+3)
b<-2*fibo(i+1)*fibo(i+2)
h<-fibo(i+1)^2+fibo(i+2)^2
print(a,b,h)
}
fibo(i)
n<-6
i<-1
while (i<n){
a<-fibo(i)*fibo(i+3)
b<-2*fibo(i+1)*fibo(i+2)
h<-fibo(i+1)^2+fibo(i+2)^2
print(a,b,h)
}
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
print(a,b,h)
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
print(c(a,b,h))}
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))}
fib <- function(n) {
a = 0
b = 1
for (i in 1:n) {
tmp = b
b = a
a = a + tmp
}
return(a)
}
print(fib(7))
#Funcion de Fibonacci
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))
}
#Funcion de Fibonacci
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))
}
#Funcion de Fibonacci
fibo<-c(0,1,1,2,3,5,8,13,21,34,55,89)
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))
}
fibo<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))
}
#Funcion de Fibonacci
fibo<-function(n){
f1<-0;
f2<-1;
aux<-f1+f2
while (n>1){f1<-f2;f2<-aux;aux<-f1+f2;n<-n-1}
return(f2)
}
n<-6
i<-1
while (i<n){
v<-c(fibo(i), fibo(i+1), fibo(i+2), fibo(i+3))
a<-v[1]*v[4]
b<-2*v[2]*v[3]
h<-v[2]^2+v[3]^2
i<-i+1
print(c(a,b,h))
}
