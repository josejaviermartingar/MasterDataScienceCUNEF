set.seed(17)
cv.errors <- bikes(degree = seq(1,5,1),
error = rep(NA, 5))
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
View(cv.errors)
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(temp, i), data=bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K=10)$delta[1]
}
View(cv.errors)
kable(cv.errors)
install.packages("kableExtra")
kable(cv.errors)
cv.errors
sqrt(cv.errors)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
#Fijo una semilla
set.seed(88)
#Y calculo los coeficientes de error y posteriormente hago la raiz cuadrada de los coeficientes
#de error ya que dicho valor aparece al cuadrado.
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
View(cv.errors)
cv.errors <- sqrt(cv.errors$error)
cv.errors <- data.frame(sqrt(cv.errors$error))
cv.errors <- data.frame(cv.errors)
View(cv.errors)
View(cv.errors)
names(bikes)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
View(cv.errors)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
View(cv.errors)
sqrt(cv.errors$error)
cv.errors <- data.frame(cv.errors)
View(cv.errors)
sqrt(cv.errors$error)
cv.errors <- data.frame(cv.errors)
View(cv.errors)
sqrt(cv.errors$error)
View(cv.errors)
cv.errors1 <- data.frame(cv.errors)
View(cv.errors1)
cv.errors1(sqrt(cv.errors$error))
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {  # loop through 1-5 degree polynomials
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
cv.errors
cv.errors1 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
cv.errors1 <- data.frame(degree = seq(1,4,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
cv.errors1 <- data.frame(degree = seq(1,1,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
cv.errors1 <- data.frame(degree = seq(1,1,1),
error = rep(NA, 1))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
cv.errors1 <- data.frame(degree = seq(1,1,1),
error = rep(NA, 1))
for (i in 1:1) {
glm.fit <- glm(cnt~poly(holiday, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors1$error)
names(bikes)
cv.errors2 <- data.frame(degree = seq(1,7,1),
error = rep(NA, 7))
for (i in 1:1) {
glm.fit <- glm(cnt~poly(weekday, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
cv.errors2 <- data.frame(degree = seq(1,7,1),
error = rep(NA, 7))
for (i in 1:7) {
glm.fit <- glm(cnt~poly(weekday, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
cv.errors2 <- data.frame(degree = seq(1,6,1),
error = rep(NA, 7))
for (i in 1:6) {
glm.fit <- glm(cnt~poly(weekday, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
View(cv.errors2)
cv.errors2 <- data.frame(degree = seq(1,6,1),
error = rep(NA, 6))
for (i in 1:6) {
glm.fit <- glm(cnt~poly(weekday, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
View(cv.errors1)
View(cv.errors2)
sqrt(cv.errors2$error)
View(cv.errors1)
cv.errors3 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(atemp, i), data = bikes)
cv.errors3$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors3$error)
cv.errors4 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(hum, i), data = bikes)
cv.errors4$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors4$error)
cv.errors5 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(windspeed, i), data = bikes)
cv.errors5$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors5$error)
sqrt(cv.errors4$error)
sqrt(cv.errors3$error)
sqrt(cv.errors2$error)
sqrt(cv.errors1$error)
sqrt(cv.errors$error)
fit1 <- glm(cnt~poly(temp, 3), data = bikes,
family = binomial)
fit1 <- glm(cnt~poly(temp, 3), data = bikes)
pred1 <- predict(fit1, newdata = list(temp = temp.grid),
se = TRUE, type = 'response')
tempLims <- range(temp)
fit1 <- glm(cnt~poly(temp, 3), data = bikes)
pred1 <- predict(fit1, newdata = list(temp = temp.grid),
se = TRUE, type = 'response')
fit1 <- glm(cnt~poly(temp, 3), data = bikes)
pred1 <- predict(fit1, newdata = list(temp),
se = TRUE, type = 'response')
tempLims <- range(temp)
temp.grid <- seq(from=tempLims[1], to=tempLims[2])
pred <- predict(fit, newdata = list(temp = temp.grid),
se=TRUE)
se.bands <- cbind(pred$fit1 + 2*pred$se.fit1,
pred$fit1 - 2*pred$se.fit1)
plot(temp,cnt,xlim=ageLims ,cex=.5,col="darkgrey")
title("Degree -4 Polynomial ",outer=T)
lines(temp.grid,pred$fit1,lwd=2,col="blue")
matlines(temp.grid,se.bands,lwd=2,col="blue",lty=3)
tempLims <- range(temp)
tempLims <- range(bikes$temp)
temp.grid <- seq(from=tempLims[1], to=tempLims[2])
pred <- predict(fit, newdata = list(temp = temp.grid),
se=TRUE)
#En esta caso me quedo con el tercer grado del polinomio porque es el que menor error me da.
fit1 = lm(bikes~poly(temp, 3), data=bikes)
#En esta caso me quedo con el tercer grado del polinomio porque es el que menor error me da.
fit1 = lm(bikes~poly(temp, 3), data = bikes)
#En esta caso me quedo con el tercer grado del polinomio porque es el que menor error me da.
attach(bikes)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit1 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
summary(fit1)
summary(fit2)
cv.glm(fit2, bikes)
cv.glm(fit2, bikes, K = 10)
cv.glm(fit2, bikes, K = 5)
library(gam)
install.packages("gam")
library(gam)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
plot(holiday, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(holiday, cnt, df = 16)
fit4 <- smooth.spline(holiday, cnt, cv = TRUE)
plot(holiday, cnt, xlim = holidayLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(holiday, cnt, df = 16)
fit4 <- smooth.spline(holiday, cnt, cv = TRUE)
holidayLims
atempLims
atempLims <- range(atemp)
plot(atemp, cnt, xlim = atempLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(atemp, cnt, df = 16)
fit4 <- smooth.spline(atemp, cnt, cv = TRUE)
fit4$df
tempLims <- range(temp)
names(bikes)
wdaypLims <- range(weekday) #Calculo los limites de la variable
plot(weekday, cnt, xlim = atempLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(weekday, cnt, df = 16)
fit6 <- smooth.spline(weekday, cnt, cv = TRUE)
windspeedLims <- range(windspeed) #Calculo los limites de la variable
plot(windspeed, cnt, xlim = wdaypLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(weekday, cnt, df = 16)
fit6 <- smooth.spline(weekday, cnt, cv = TRUE)
fit6$df
wdayLims <- range(workingday) #Calculo los limites de la variable
wdayLims <- range(workingday) #Calculo los limites de la variable
plot(workingday, cnt, xlim = wdayLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(workingday, cnt, df = 16)
fit6 <- smooth.spline(workingday, cnt, cv = TRUE)
fit6$df
windspeedLims <- range(windspeed) #Calculo los limites de la variable
plot(windspeed, cnt, xlim = windspeedLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(windspeed, cnt, df = 16)
fit6 <- smooth.spline(windspeed, cnt, cv = TRUE)
fit6$df
HumLims <- range(hum) #Calculo los limites de la variable
plot(hum, cnt, xlim = HumLims, col = "gray")
title("Smoothing Spline")
fit7 <- smooth.spline(hum, cnt, df = 16)
fit8 <- smooth.spline(hum, cnt, cv = TRUE)
fit8$df
######## gam (para luego)#######
gam1 <- gam(cnt~s(temp, 9.103704) + s(atemp, 8.805497) + s(windspeed, 6.007664) + s(hum, 4.548876), data =bikes)
summary(gam1)
######## gam (para luego)#######
gam1 <- gam(cnt~s(temp, 9.103704) + s(windspeed, 6.007664) + s(hum, 4.548876), data = bikes)
summary(gam1)
glm.fit <- glm(bikes~poly(holiday, i), data = bikes)
glm.fit1 <- glm(bikes~poly(temp, i), data = bikes)
glm.fit1 <- glm(bikes~poly(windspeed, i), data = bikes)
qsp <- lm(cnt ~ temp + I(temp^3) + I(windspeed^3), data = bikes)
summary(qsp)
qsp <- lm(cnt ~ temp + I(temp^3) + I(windspeed^3) + I(hum^3), data = bikes)
summary(qsp)
qsp
qsp <- lm(cnt ~ I(temp^3) + I(windspeed^3) + I(hum^3), data = bikes)
summary(qsp)
qsp <- lm(cnt ~ temp + I(temp^3) + I(windspeed^3) + I(hum^3), data = bikes)
summary(qsp)
glm.fit <- glm(cnt2~poly(temp, 3), data = bikes)
glm.fit <- glm(cnt~poly(temp, 3), data = bikes)
glm.fit <- glm(cnt ~ poly(temp, 3) + poly(windspeed, 3) + poly(hum, 3) , data = bikes)
glm.fit
summary(qsp)
qsp
glm.fit
cv.glm(bikes, glmfit = glm.fit, K =10)
cross_val <- cv.glm(bikes, glmfit = glm.fit, K = 10)
cross_val
sqrt(cross_val$delta)
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
cross_val <- cv.glm(bikes, glm.fit, K = 10)
sqrt(cross_val$delta)
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
bikes <- select(bikes, -dteday, -instant, -casual, -registered)
set.seed(88)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
cv.errors1 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(hum, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors1$error)
cv.errors2 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(windspeed, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
tempLims <- range(temp)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
windspeedLims <- range(windspeed) #Calculo los limites de la variable
plot(windspeed, cnt, xlim = windspeedLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(windspeed, cnt, df = 16)
fit4 <- smooth.spline(windspeed, cnt, cv = TRUE)
fit4$df
HumLims <- range(hum) #Calculo los limites de la variable
plot(hum, cnt, xlim = HumLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(hum, cnt, df = 16)
fit6 <- smooth.spline(hum, cnt, cv = TRUE)
fit6$df
gam1 <- gam(cnt~s(temp, 9.103704) + s(windspeed, 6.007664) + s(hum, 4.548876), data = bikes)
gam1
glm.fit <- glm(cnt ~ poly(temp, 3) + poly(windspeed, 3) + poly(hum, 3) , data = bikes)
glm.fit
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
set.seed(88)
gam1 <- gam(cnt~s(temp, 9.103704) + s(windspeed, 6.007664) + s(hum, 4.548876), data = bikes)
gam1
glm.fit <- glm(cnt ~ poly(temp, 3) + poly(windspeed, 3) + poly(hum, 3) , data = bikes)
glm.fit
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
sqrt(cross_val$delta)
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
bikes <- select(bikes, -dteday, -instant, -casual, -registered)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
View(bikes)
names(bikes)
View(bikes)
round(cor(bikes),2)
correlacion <- round(cor(bikes), 1)
corrplot(correlacion, method = "number", type = "full")
round(cor(bikes),2)
correlacion <- round(cor(bikes), 1)
bikes <- as.factor(bikes)
round(cor(bikes),2)
correlacion <- round(cor(bikes), 1)
corrplot(correlacion, method = "number", type = "full")
bikes <- as.double(bikes)
round(cor(bikes),2)
correlacion <- round(cor(bikes), 1)
corrplot(correlacion, method = "number", type = "full")
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
bikes <- select(bikes, -dteday, -instant, -casual, -registered)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
corrplot(bikes, method = c("number"))
corrplot(bikes, method = "number")
corrplot(bikes, method = "square")
library(ISLR)
library(boot)
library(gam)
library(corrplot)
library(dplyr)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
names(bikes)
bikes <- select(bikes, -dteday, -instant, -casual, -registered)
set.seed(88)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
cv.errors1 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(hum, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors1$error)
cv.errors2 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(windspeed, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
tempLims <- range(temp)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
windspeedLims <- range(windspeed) #Calculo los limites de la variable
plot(windspeed, cnt, xlim = windspeedLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(windspeed, cnt, df = 16)
fit4 <- smooth.spline(windspeed, cnt, cv = TRUE)
fit4$df
HumLims <- range(hum) #Calculo los limites de la variable
plot(hum, cnt, xlim = HumLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(hum, cnt, df = 16)
fit6 <- smooth.spline(hum, cnt, cv = TRUE)
fit6$df
gam1 <- gam(cnt~s(temp, 9.103704) + s(windspeed, 6.007664) + s(hum, 4.548876), data = bikes)
gam1
glm.fit <- glm(cnt ~ poly(temp, 3) + poly(windspeed, 3) + poly(hum, 3) , data = bikes)
glm.fit
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
tempLims <- range(bikes$temp)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
library(ISLR)
library(boot)
library(gam)
library(corrplot)
library(dplyr)
bikes <- read.csv("C:/Users/Equipo/Desktop/CUNEF/Prediccion/Datos/day.csv")
names(bikes)
bikes <- select(bikes, -dteday, -instant, -casual, -registered)
set.seed(88)
cv.errors <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(temp, i), data = bikes)
cv.errors$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors$error)
cv.errors1 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(hum, i), data = bikes)
cv.errors1$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors1$error)
cv.errors2 <- data.frame(degree = seq(1,5,1),
error = rep(NA, 5))
for (i in 1:5) {
glm.fit <- glm(cnt~poly(windspeed, i), data = bikes)
cv.errors2$error[i] <- cv.glm(bikes, glm.fit, K = 10)$delta[1]
}
sqrt(cv.errors2$error)
tempLims <- range(bikes$temp)
plot(temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
windspeedLims <- range(bikes$windspeed) #Calculo los limites de la variable
plot(windspeed, cnt, xlim = windspeedLims, col = "gray")
title("Smoothing Spline")
fit3 <- smooth.spline(windspeed, cnt, df = 16)
fit4 <- smooth.spline(windspeed, cnt, cv = TRUE)
fit4$df
HumLims <- range(bikes$hum) #Calculo los limites de la variable
plot(hum, cnt, xlim = HumLims, col = "gray")
title("Smoothing Spline")
fit5 <- smooth.spline(hum, cnt, df = 16)
fit6 <- smooth.spline(hum, cnt, cv = TRUE)
fit6$df
gam1 <- gam(cnt~s(temp, 9.103704) + s(windspeed, 6.007664) + s(hum, 4.548876), data = bikes)
gam1
glm.fit <- glm(cnt ~ poly(temp, 3) + poly(windspeed, 3) + poly(hum, 3) , data = bikes)
glm.fit
cross_val <- cv.glm(bikes, gam1, K = 10)
sqrt(cross_val$delta)
tempLims <- range(bikes$temp)
plot(bikes$temp, cnt, xlim = tempLims, col = "gray")
title("Smoothing Spline")
fit1 <- smooth.spline(temp, cnt, df = 16)
fit2 <- smooth.spline(temp, cnt, cv = TRUE)
fit2$df
